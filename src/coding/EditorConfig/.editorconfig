root = true

# All Files
[*]
end_of_line = crlf # Unity 프로젝트는 LF로. blazor 프로젝트는 crlf로.
charset = utf-8
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true

# ====================================================================================================================
# Shader
[*.{cg,hlsl,shader}]
indent_style = space
indent_size = 4

# ====================================================================================================================
# JSON
[*.{json,json5,webmanifest}]
indent_size = 2

# ====================================================================================================================
# YAML
[*.{yml,yaml}]
indent_size = 2

# ====================================================================================================================
# Markdown
[*.{md,mdx}]
trim_trailing_whitespace = false

# ====================================================================================================================
# CSharp
[*.{csproj}]
indent_size = 2
end_of_line = crlf
charset = utf-8-bom
trim_trailing_whitespace = true
insert_final_newline = false


## dotnet_ (C# 및 VB 모두 적용)
## csharp_ (C# 만 적용)
## .csproj     <AnalysisLevel>latest-all</AnalysisLevel>

[*.{cs,csx,razor}]
file_header_template = unset                   # 파일 헤더 문구.
dotnet_sort_system_directives_first = false    # IDE0055 | using System이 나중에(false) 오도록.
dotnet_separate_import_directive_groups = true # IDE0055 | using 끼리끼리 묶기.


# --------------------------------------------------------------------------------------------------------------------
[*.{cs,csx,razor}]

dotnet_style_namespace_match_folder = true:suggestion                              # IDE0130 | 네임스페이스와 폴더 매칭
dotnet_style_qualification_for_field = true:suggestion                             # IDE0003 | `this.` 사용하기 - 필드
dotnet_style_qualification_for_property = true:suggestion                          # IDE0003 | `this.` 사용하기 - 프로퍼티
dotnet_style_qualification_for_method = true:suggestion                            # IDE0003 | `this.` 사용하기 - 메소드
dotnet_style_qualification_for_event = true:suggestion                             # IDE0003 | `this.` 사용하기 - 이벤트
dotnet_style_predefined_type_for_locals_parameters_members = true:error            # IDE0049 | 타입키워드-선언시, int(true), Int32(false)
dotnet_style_predefined_type_for_member_access = true:error                        # IDE0049 | 타입키워드-할당시, int(true), Int32(false)
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:error # IDE0047, IDE0048 | 괄호
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:error # IDE0047, IDE0048 | 괄호
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:error      # IDE0047, IDE0048 | 괄호
dotnet_style_parentheses_in_other_operators = always_for_clarity:error             # IDE0047, IDE0048 | 괄호
dotnet_style_require_accessibility_modifiers = always:error                        # IDE0040 | 접근자 켜기.
dotnet_style_coalesce_expression = false:error                                     # IDE0029 | 연산자: `??`
dotnet_style_null_propagation = false:error                                        # IDE0031 | 연산자: `?.` 
dotnet_style_prefer_conditional_expression_over_assignment = false:error           # IDE0045 | 연산자: 삼항연산자 `? :` - 할당시
dotnet_style_prefer_conditional_expression_over_return = false:error               # IDE0046 | 연산자: 삼항연산자 `? :` - 리턴시
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion # IDE0041 | null 검사용: if (value is null) - 비교
dotnet_style_readonly_field = true:error                                           # IDE0044 | 되도록이면 readonly 사용
dotnet_style_object_initializer = true:error                                       # IDE0017 | 초기자: 오브젝트
dotnet_style_collection_initializer = true:error                                   # IDE0028 | 초기자: 컬렉션
dotnet_style_explicit_tuple_names = true:error                                     # IDE0033 | 튜플: var name = tuple.name; // var name = tuple.Item1;
dotnet_style_prefer_inferred_tuple_names = true:error                              # IDE0037 | 튜플: 생성시 이름
dotnet_style_prefer_inferred_anonymous_type_member_names = true:error              # IDE0037 | 익명타입: 생성시 이름
dotnet_style_prefer_auto_properties = true:error                                   # IDE0032 | 선호: auto 프로퍼티 
dotnet_style_prefer_compound_assignment = true:error                               # IDE0054 | 선호: `+=`
dotnet_style_prefer_simplified_interpolation = true:error                          # IDE0071 | 선호: string interpolation에서 .ToString 생략
dotnet_style_prefer_simplified_boolean_expressions = true:error                    # IDE0075 | 선호: `&&`와 같이 불린 반환 표현식 간략화
dotnet_style_operator_placement_when_wrapping = end_of_line:error                  # ???     | 문서 사라짐.

## ==================================================================================================================================
[*.{cs,csx,razor}]
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error # IDE0036 | 선언 순서
csharp_prefer_static_local_function = true:error                         # IDE0062 | 로컬함수 : 되도록이면 스테틱
csharp_using_directive_placement = outside_namespace:error                 # IDE0063 | using선언 : 네임스페이스안에 using을  둘것인지
csharp_style_prefer_null_check_over_type_check = true:suggestion                   # IDE0150 | null 검사용: if (value is null) - 타입검사
csharp_style_var_for_built_in_types = false:error                        # IDE0007, IDE0008 | var 사용: builtin타입
csharp_style_var_when_type_is_apparent = false:error                     # IDE0007, IDE0008 | var 사용: 해당라인에 타입이 보이면
csharp_style_var_elsewhere = false:error                                 # IDE0007, IDE0008 | var 사용: 그 외
csharp_style_expression_bodied_properties = true:error                   # IDE0025          | `=>` 사용: 프로퍼티
csharp_style_expression_bodied_indexers = true:error                     # IDE0026          | `=>` 사용: 인덱서
csharp_style_expression_bodied_accessors = false:error                   # IDE0027          | `=>` 사용: {get =>  set=> }
csharp_style_expression_bodied_methods = false:error                     # IDE0022          | `=>` 사용: 메소드
csharp_style_expression_bodied_constructors = false:error                # IDE0021          | `=>` 사용: 생성자
csharp_style_expression_bodied_operators = false:error                   # IDE0023, IDE0024 | `=>` 사용: 연산자 오버로딩
csharp_style_expression_bodied_lambdas = false:error                     # IDE0053          | `=>` 사용: 람다
csharp_style_expression_bodied_local_functions = false:error             # IDE0061          | `=>` 사용: 지역 함수
csharp_style_prefer_pattern_matching = true:error                        # IDE0078          | 패턴매칭: 사용
csharp_style_pattern_matching_over_is_with_cast_check = true:error       # IDE0020, IDE0038 | 패턴매칭: 캐스팅 if (o is int i)
csharp_style_pattern_matching_over_as_with_null_check = true:error       # IDE0019          | 패턴매칭: 널확인 if (o is string s)
csharp_style_prefer_switch_expression = true:error                       # IDE0066          | 패턴매칭: switch
csharp_style_prefer_not_pattern = true:error                             # IDE0083          | 패턴매칭: `is not`
csharp_style_inlined_variable_declaration = true:error                   # IDE0018 | 인라인 : out 변수 구문
csharp_style_deconstructed_variable_declaration = true:error             # IDE0042 | 튜플: var (name, age) = GetPersonTuple();
csharp_style_pattern_local_over_anonymous_function = true:error          # IDE0039 | 선호: 익명함수보다 로컬함수 선호
csharp_style_prefer_index_operator = true:error                          # IDE0057 | 선호: 인덱스 
csharp_style_prefer_range_operator = true:error                          # IDE0057 | 선호: 범위
csharp_style_implicit_object_creation_when_type_is_apparent = true:error # IDE0090 | 선호: new Type()에서 type명 생략
csharp_style_throw_expression = true:error                               # IDE0016 | 간소화된 throw구문. this.s = s ?? throw new ArgumentNullException(nameof(s));
csharp_style_conditional_delegate_call = false:error                      # IDE0031 | 연산자: `?.` - 델리게이트 func?.Invoke(args);
csharp_prefer_simple_default_expression = false:error                     # IDE0034 | 선호: default(CancellationToken)
csharp_prefer_braces = true:error                                        # IDE0011 | 괄호: 추가
csharp_prefer_simple_using_statement = true:suggestion                     # IDE0063 | using문 : 괄호생략



[*.{cs,csx,razor}]
dotnet_code_quality_unused_parameters = all:error                                       # IDE0060 | 미사용 발견: 인자
dotnet_remove_unnecessary_suppression_exclusions = none:error                           # IDE0079 | 미사용 발견: pragma
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion # IDE0058 | 미사용 발견: 표현식
csharp_style_unused_value_assignment_preference = discard_variable:suggestion           # IDE0059 | 미사용 발견: 할당


[*.{cs,csx,razor}]
csharp_new_line_before_open_brace = all                                          # 스타일 | 새로운 라인: 괄호 전
csharp_new_line_before_else = true                                               # 스타일 | 새로운 라인: else 전
csharp_new_line_before_catch = true                                              # 스타일 | 새로운 라인: catch 전
csharp_new_line_before_finally = true                                            # 스타일 | 새로운 라인: finally 전
csharp_new_line_before_members_in_object_initializers = true                     # 스타일 | 새로운 라인: initializer 맴버 후
csharp_new_line_before_members_in_anonymous_types = true                         # 스타일 | 새로운 라인: 익명 타입 후
csharp_new_line_between_query_expression_clauses = true                          # 스타일 | 새로운 라인: linq query expression 사이사이

csharp_indent_switch_labels = true                                               # 스타일 | indent: switch
csharp_indent_case_contents = true                                               # 스타일 | indent: case
csharp_indent_case_contents_when_block = false                                   # 스타일 | indent: case안 {} 블록
csharp_indent_labels = no_change                                                 # 스타일 | indent: label
csharp_indent_block_contents = true                                              # 스타일 | indent:{} 블록
csharp_indent_braces = false                                                     # 스타일 | indent:() 괄호

csharp_space_after_cast = false                                                  # 스타일| 띄어쓰기: 캐스팅 후. int y = (int)x;
csharp_space_after_keywords_in_control_flow_statements = true                    # 스타일| 띄어쓰기:
csharp_space_between_parentheses = false                                         # 스타일| 띄어쓰기:
csharp_space_before_colon_in_inheritance_clause = true                           # 스타일| 띄어쓰기:
csharp_space_after_colon_in_inheritance_clause = true                            # 스타일| 띄어쓰기:
csharp_space_around_binary_operators = before_and_after                          # 스타일| 띄어쓰기:
csharp_space_between_method_declaration_parameter_list_parentheses = false       # 스타일| 띄어쓰기:
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false # 스타일| 띄어쓰기:
csharp_space_between_method_declaration_name_and_open_parenthesis = false        # 스타일| 띄어쓰기:
csharp_space_between_method_call_parameter_list_parentheses = false              # 스타일| 띄어쓰기:
csharp_space_between_method_call_empty_parameter_list_parentheses = false        # 스타일| 띄어쓰기:
csharp_space_between_method_call_name_and_opening_parenthesis = false            # 스타일| 띄어쓰기:
csharp_space_after_comma = true                                                  # 스타일| 띄어쓰기:
csharp_space_before_comma = false                                                # 스타일| 띄어쓰기:
csharp_space_after_dot = false                                                   # 스타일| 띄어쓰기:
csharp_space_before_dot = false                                                  # 스타일| 띄어쓰기:
csharp_space_after_semicolon_in_for_statement = true                             # 스타일| 띄어쓰기:
csharp_space_before_semicolon_in_for_statement = false                           # 스타일| 띄어쓰기:
csharp_space_around_declaration_statements = false                               # 스타일| 띄어쓰기:
csharp_space_before_open_square_brackets = false                                 # 스타일| 띄어쓰기:
csharp_space_between_empty_square_brackets = false                               # 스타일| 띄어쓰기:
csharp_space_between_square_brackets = false                                     # 스타일| 띄어쓰기:

csharp_preserve_single_line_statements = false                                   # 스타일| 한줄쓰기 statements
csharp_preserve_single_line_blocks = true                                        # 스타일| 한줄쓰기 blocks

csharp_style_namespace_declarations = block_scoped:error                       # 스타일| namespace 선언위치(블록단위, 파일단위)

# --------------------------------------------------------------------------------------------------------------------
# | capitalization   |                  |
# |----------------- |------------------|
# | pascal_case      | PascalCase       |
# | camel_case       | camelCase        |
# | first_word_upper | F_irstWord_upper |
# | all_upper        | ALL_UPPER        |
# | all_lower        | all_lower        |
[*.{cs,csx,razor}]
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.first_upper_style.capitalization = first_word_upper

dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I_

dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T

dotnet_naming_style.disallowed_style.capitalization  = pascal_case
dotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
dotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____

dotnet_naming_style.internal_error_style.capitalization  = pascal_case
dotnet_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____
dotnet_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____

# All public/protected/protected_internal constant fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = warning

# All public/protected/protected_internal static readonly fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No other public/protected/protected_internal fields are allowed
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error

##########################################
# StyleCop Field Naming Rules
# Naming rules for fields follow the StyleCop analyzers
# This does not override any rules using disallowed_style above
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers
##########################################

# All constant fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = warning

# All static readonly fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No non-private instance fields are allowed
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = error

# Private fields must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md
dotnet_naming_symbols.stylecop_private_fields_group.applicable_accessibilities = private
dotnet_naming_symbols.stylecop_private_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.symbols     = stylecop_private_fields_group
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.severity    = warning

# Local variables must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md
dotnet_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local
dotnet_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = silent

# This rule should never fire.  However, it's included for at least two purposes:
# First, it helps to understand, reason about, and root-case certain types of issues, such as bugs in .editorconfig parsers.
# Second, it helps to raise immediate awareness if a new field type is added (as occurred recently in C#).
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds           = field
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols  = sanity_check_uncovered_field_case_group
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.style    = internal_error_style
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error


##########################################
# Other Naming Rules
##########################################

# All of the following must be PascalCase:
# - Namespaces
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-namespaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Classes and Enumerations
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Delegates
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces#names-of-common-types
# - Constructors, Properties, Events, Methods
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-type-members
dotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property
dotnet_naming_rule.element_rule.symbols              = element_group
dotnet_naming_rule.element_rule.style                = pascal_case_style
dotnet_naming_rule.element_rule.severity             = warning

# Interfaces use PascalCase and are prefixed with uppercase 'I'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.interface_group.applicable_kinds = interface
dotnet_naming_rule.interface_rule.symbols              = interface_group
dotnet_naming_rule.interface_rule.style                = prefix_interface_with_i_style
dotnet_naming_rule.interface_rule.severity             = warning

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
dotnet_naming_rule.type_parameter_rule.symbols              = type_parameter_group
dotnet_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style
dotnet_naming_rule.type_parameter_rule.severity             = warning

# Function parameters use camelCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/naming-parameters
dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
dotnet_naming_rule.parameters_rule.symbols              = parameters_group
dotnet_naming_rule.parameters_rule.style                = camel_case_style
dotnet_naming_rule.parameters_rule.severity             = warning

# --------------------------------------------------------------------------------------------------------------------
[*.{cs,csx,razor}]
dotnet_naming_symbols.interface_group.applicable_kinds = interface
dotnet_naming_rule.interface_rule.symbols              = interface_group
dotnet_naming_rule.interface_rule.style                = xx_style_interface
dotnet_naming_rule.interface_rule.severity             = suggestion
dotnet_naming_style.xx_style_interface.capitalization = pascal_case
dotnet_naming_style.xx_style_interface.required_prefix = I

dotnet_naming_symbols.enum_group.applicable_kinds = enum
dotnet_naming_rule.enum_rule.symbols              = enum_group
dotnet_naming_rule.enum_rule.style                = xx_style_enum
dotnet_naming_rule.enum_rule.severity             = error
dotnet_naming_style.xx_style_enum.required_prefix = E_
dotnet_naming_style.xx_style_enum.capitalization = all_upper

dotnet_naming_symbols.private_fields.applicable_kinds           = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_rule.private_fields_underscored.symbols           = private_fields
dotnet_naming_rule.private_fields_underscored.style             = xx_style_privatemember
dotnet_naming_rule.private_fields_underscored.severity          = error
dotnet_naming_style.xx_style_privatemember.required_prefix      = _
dotnet_naming_style.xx_style_privatemember.capitalization       = pascal_case
# --------------------------------------------------------------------------------------------------------------------
# dotnet_diagnostic
# RCS    | Roslynator.Analyzers
# VSTHRD | Microsoft.VisualStudio.Threading.Analyzers 
[*.{cs,csx,razor}]
dotnet_analyzer_diagnostic.severity = error    # 코드분석기 결과 처리.

dotnet_diagnostic.CA1002.severity = none       # use Collection<T>
dotnet_diagnostic.CA1307.severity = suggestion # 'string.IndexOf(char)' has a method overload that takes a 'StringComparison' parameter.
dotnet_diagnostic.CA1707.severity = none       # Identifiers should not contain underscores
dotnet_diagnostic.CA1805.severity = none       # 불필요한 초기화
dotnet_diagnostic.CA2007.severity = none       # ConfigureAwait on the awaited task
dotnet_diagnostic.CA2227.severity = none       # for razor file - Collection properties should be read only




dotnet_diagnostic.IDE0045.severity = suggestion # Use conditional expression for assignment (IDE0045)
dotnet_diagnostic.IDE0046.severity = suggestion # Use conditional expression for return (IDE0046)


dotnet_diagnostic.IDE1006.severity = error # Naming rule violation
dotnet_diagnostic.IDE0010.severity = suggestion # Add missing cases to switch statement (IDE0010)
dotnet_diagnostic.IDE0035.severity = none # Remove unreachable code
dotnet_diagnostic.IDE0051.severity = none # is unused
dotnet_diagnostic.IDE0052.severity = none # Remove unread private member (IDE0052)
dotnet_diagnostic.IDE0060.severity = none # Remove unused parameter
dotnet_diagnostic.IDE0130.severity = suggestion # Namespace does not match folder structure

dotnet_diagnostic.JSON002.severity = none # json string

dotnet_diagnostic.RCS1188.serverity = none    # Remove redundant auto-property initialization

dotnet_diagnostic.VSTHRD111.severity = none # Use ConfigureAwait(bool)

# dotnet_diagnostic.SA1636.severity = none # If you use StyleCop, you'll need to disable SA1636: File header copyright text should match.